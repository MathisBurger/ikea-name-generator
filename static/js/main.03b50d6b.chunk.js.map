{"version":3,"sources":["Constants.js","Generate.js","components/Namecard.js","MainCompoenent.js","App.js","reportWebVitals.js","index.js"],"names":["startSyllables","middleSyllables","endSyllables","GenerateName","name","getRandom","length","i","max","Math","floor","random","Namecard","list","push","className","this","props","render","React","Component","MainComponent","useState","renderNameCard","setRenderNameCard","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"4RAAWA,G,MAAiB,CACxB,MAAO,OAAQ,OAAQ,MAAO,QAAM,MAAO,KAAM,SAAO,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,KAAM,QAG9FC,EAAkB,CACzB,MAAO,KAAM,MAAO,KAAM,SAAO,MAAO,MAGjCC,EAAe,CACtB,KAAM,KAAM,OAAQ,MAAO,OAAQ,MAAO,WAAS,KAAM,KAAM,MAAO,OAAQ,OAAQ,OAAQ,MCL3F,SAASC,IACZ,IAAIC,EAAO,GACXA,GAAQJ,EAAeK,EAAUL,EAAeM,OAAS,IACzD,IAAK,IAAIC,EAAE,EAAGA,EAAEF,EAAU,GAAIE,IAC1BH,GAAQH,EAAgBI,EAAUJ,EAAgBK,OAAS,IAG/D,OADAF,GAAQF,EAAaG,EAAUH,EAAaI,OAAS,IAMzD,SAASD,EAAUG,GACf,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,I,WCbpCI,EAAb,4JAEI,WAII,IADA,IAAIC,EAAO,GACFN,EAAE,EAAGA,EAAE,GAAIA,IAChBM,EAAKC,KAAK,qBAAKC,UAAW,oBAAhB,SAAsCZ,OAIpD,OAAIa,KAAKC,MAAMC,OAEP,sBAAKH,UAAW,YAAhB,UACI,qBAAKA,UAAW,iBAAhB,+BAGCF,KAIF,SArBnB,GAA8BM,IAAMC,WCD7B,SAASC,IAAiB,IAAD,EAEgBC,oBAAS,GAFzB,mBAErBC,EAFqB,KAELC,EAFK,KAIxB,OACI,sBAAKT,UAAW,YAAhB,UACI,wBAAQA,UAAW,WAAYU,QAAS,kBAAMD,GAAkB,IAAhE,sBACA,cAAC,EAAD,CAAUN,OAAQK,OCAnBG,MAPf,WACE,OACE,cAACL,EAAD,KCOWM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASlB,OACP,cAAC,IAAMmB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.03b50d6b.chunk.js","sourcesContent":["export let startSyllables = [\n    \"vim\", \"land\", \"kivi\", \"ask\", \"sö\", \"fri\", \"ek\", \"röd\", \"ro\", \"sa\", \"ai\", \"vig\", \"asg\", \"ble\", \"as\", \"gur\"\n];\n\nexport let middleSyllables = [\n    \"nig\", \"es\", \"der\", \"he\", \"kör\", \"sen\", \"ne\"\n];\n\nexport let endSyllables = [\n    \"ik\", \"by\", \"hamn\", \"ten\", \"torp\", \"vel\", \"skärm\", \"la\", \"na\", \"dis\", \"jerd\", \"karv\", \"veig\", \"li\"\n];\n\n\n","import {startSyllables, middleSyllables, endSyllables} from \"./Constants\";\n\n// simple algorithm to generate random ikea product\n// names from the Syllables arrays\nexport function GenerateName() {\n    let name = \"\";\n    name += startSyllables[getRandom(startSyllables.length - 1)]\n    for (let i=0; i<getRandom(5); i++) {\n        name += middleSyllables[getRandom(middleSyllables.length - 1)];\n    }\n    name += endSyllables[getRandom(endSyllables.length - 1)];\n    return name;\n}\n\n\n// returns a random integer\nfunction getRandom(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n}\n","import React from 'react';\nimport './Namecard.css';\nimport {GenerateName} from \"../Generate\";\n\nexport class Namecard extends React.Component {\n\n    render() {\n\n        // generate a list of name cards\n        let list = [];\n        for (let i=0; i<10; i++) {\n            list.push(<div className={\"name-card-element\"}>{GenerateName()}</div>);\n        }\n\n        // render only if given in props\n        if (this.props.render) {\n            return (\n                <div className={\"name-card\"}>\n                    <div className={\"name-card-head\"}>\n                        new produkt names\n                    </div>\n                    {list}\n                </div>\n            );\n        } else {\n            return null;\n        }\n    }\n}\n","import React, { useState } from 'react';\nimport {Namecard} from \"./components/Namecard\";\n\nexport function MainComponent() {\n\n    const [renderNameCard, setRenderNameCard] = useState(false);\n\n        return (\n            <div className={\"container\"}>\n                <button className={\"btn-grad\"} onClick={() => setRenderNameCard(true)}>Generate</button>\n                <Namecard render={renderNameCard} />\n            </div>\n        )\n}\n\n","import './App.css';\nimport {MainComponent} from \"./MainCompoenent\";\n\nfunction App() {\n  return (\n    <MainComponent />\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}